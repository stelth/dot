[[plugins]]
repo = 'tpope/vim-commentary'
on_event = 'BufRead'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
	imap <C-k>	<Plug>(neosnippet_jump_or_expand)
	smap <C-k>	<Plug>(neosnippet_jump_or_expand)
	xmap <C-k>	<Plug>(neosnippet_expand_target)

	if has('conceal')
		set conceallevel=2 concealcursor=niv
	endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim', 'deoplete-jedi']
on_event = 'InsertEnter'
hook_source = '''
	source ~/.config/nvim/settings/plugins/deoplete.rc.vim'
	call deoplete#enable()
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_event = 'InsertCharPre'

[[plugins]]
repo = 'Shougo/deoplete-clangx'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
	if has('unix')
		call deoplete#custom#var('clangx', 'clang_binary', '/usr/bin/clang-9')
	endif
'''

[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'

[[plugins]]
repo = 'tpope/vim-fugitive'
on_event = 'BufRead'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source ~/.config/nvim/settings/plugins/denite.rc.vim'
hook_add = '''
	nnoremap <silent> ;r
		\ :<C-u>Denite -buffer-name=register
		\ register neoyank<CR>
	xnoremap <silent> ;r
		\ <C-u>Denite -default-action=replace -buffer-name=register
		\ register neoyank<CR>

	nnoremap <silent> [Window]<space>
		\ :<C-u>Denite file/rec:~/.config/nvim/settings<CR>
	nnoremap <expr> / line('$') > 10000 ? '/' :
		\ ":\<C-u>Denite -buffer-name=search -start-filter -search line\<CR>"
	nnoremap <expr> n line('$') > 10000 ? 'n' :
		\ ":\<C-u>Denite -buffer-name=search -resume -refresh
		\ -search -no-start-filter\<CR>"
	nnoremap <expr> * line('$') > 10000 ? '*' :
		\ ":\<C-u>DeniteCursorWord -buffer-name=search -search line\<CR>"
	xnoremap <silent> *
		\ "qy:Denite -input=`@q` -buffer-name=search -search line<CR>
	nnoremap <silent> [Window]s :<C-u>Denite file/point file/old
		\ -sorters=sorter/rank
		\ `finddir('.git', ';') != '' > 'file/rec.git' : 'file/rec'`
		\ file file:new<CR>

	nnoremap <silent><expr> tt &filetype == 'help' ? "g\<C-]>" :
		\ ":<C-u>DeniteCursorWord -buffer-name=tag -immediately
		\ tag:include\<CR>"
	nnoremap <silent><expr> tp &filetype == 'help' ?
		\ ":\<C-u>pop\<CR>" : ":\<C-u>Denite jump\<CR>"

	nnoremap <silent> [Window]n :<C-u>Denite dein<CR>
	nnoremap <silent> [Window]g :<C-u>Denite ghq -default-action=cd<CR>
	nnoremap <silent> ;g :<C-u>Denite -buffer-name=search
		\ -no-empty grep<CR>
	nnoremap <silent> ft :<C-u>Denite filetype<CR>
	nnoremap <silent> <C-t> :<C-u>Denite -buffer-name=deol -split=floating
		\ -cursor-pos=`tabpagenr()-1` deol:zsh<CR>
	nnoremap <silent> <C-k> :<C-u>Denite change jump<CR>
	nnoremap <silent> <C-h> :<C-u>DeniteCursorWord help<CR>

	nnoremap <silent> ;;
		\ :<C-u>Denite command command_history<CR>
'''

[plugins.ftplugin]
denite = '''
	" Define mappings
	nnoremap <silent><buffer><expr> <CR>
		\ denite#do_map('do_action')
	nnoremap <silent><buffer><expr> a
		\ denite#do_map('choose_action')
	nnoremap <silent><buffer><expr> d
		\ denite#do_map('do_action', 'delete')
	nnoremap <silent><buffer><expr> p
		\ denite#do_map('do_action', 'preview')
	nnoremap <silent><buffer><expr> q
		\ denite#do_map('quit')
	nnoremap <silent><buffer><expr> '
		\ denite#do_map('quick-move')
	nnoremap <silent><buffer><expr> i
		\ denite#do_map('open_filter_buffer')
	nnoremap <silent><buffer><expr> <Space>
		\ denite#do_map('toggle_select').'j'
	nnoremap <silent><buffer><expr> r
		\ denite#do_map('do_action', 'quickfix')
	nnoremap <silent><buffer><expr> <C-r>
		\ denite#do_map('restore_sources')
'''

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = 'let g:fruzzy#sortonempty = 0'
hook_post_update = 'call fruzzy#install()'

[[plugins]]
repo = 'vimhaskell/haskell-vim'
on_ft = 'haskell'
hook_add = '''
	echom 'Loaded haskell-vim'
	let g:haskell_classic_highlighting = 1
	let g:haskell_indif_if = 3
	let g:haskell_indent_case = 2
	let g:haskell_indent_let = 4
	let g:haskell_indent_where = 6
	let g:haskell_indent_before_where = 2
	let g:haskell_indent_after_where = 2
	let g:haskell_indent_do = 3
	let g:haskell_indent_in = 1
	let g:haskell_indent_guard = 2
	let g:haskell_indent_case_alternative = 2
'''

[[plugins]]
repo = 'neomake/neomake'
on_event = 'BufRead'
hook_source = '''
	call neomake#configure#automatic('nw', 1000)
'''
