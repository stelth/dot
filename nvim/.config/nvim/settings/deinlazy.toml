[[plugins]]
repo = 'Shougo/neoyank.vim'
name = 'neoyank'
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/deoppet.nvim'
depends = ['neosnippet-snippets', 'context_filetype']
on_event = 'InsertEnter'
if = 'has("nvim")'
hook_source = '''
  " imap <expr> L deoppet#expandable() ?
  "      \ "\<Plug>(deoppet_expand)" : ''
  imap <C-f> <Plug>(deoppet_jump_forward)
  imap <C-b> <Plug>(deoppet_jump_backward)
  smap <C-f> <Plug>(deoppet_jump_forward)
  smap <C-b> <Plug>(deoppet_jump_backward)
  xmap <C-l> <Plug>(deoppet_select_text)
  xmap <C-x> <Plug>(deoppet_cut_text)
  call deoppet#initialize()

  call deoppet#custom#option('snippets_dirs', globpath(&runtimepath, 'neosnippets', 1, 1))
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
name = 'neosnippet-snippets'

[[plugins]]
repo = 'Shougo/denite.nvim'
name = 'denite'
on_cmd = 'Denite'
hook_source = 'source ~/.config/nvim/settings/plugins/denite.rc.vim'
hook_add = '''
  nnoremap <silent> ;r
        \ :<C-u>Denite -buffer-name=register
        \ register neoyank<CR>
  xnoremap <silent> ;r
        \ :<C-u>Denite -default-action=replace -buffer-name=register
        \ register neoyank<CR>

  nnoremap <silent> [Window]<Space>
  \ :<C-u>Denite file/rec:~/.vim/rc<CR>
  nnoremap <silent><expr> / wordcount().chars > 30000 ?
  \ ":\<C-u>Denite -buffer-name=search -start-filter
  \  -search line/external\<CR>" :
  \ ":\<C-u>Denite -buffer-name=search -start-filter -search line\<CR>"
  nnoremap <silent><expr> * wordcount().chars > 30000 ?
  \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line/external\<CR>" :
  \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line\<CR>"
  xnoremap <silent> *
  \ "qy:Denite -input=`@q` -buffer-name=search -search line<CR>
  nnoremap <silent><expr> [Window]s finddir('.git', ';') != '' ?
  \ ":\<C-u>Denite -sorters=sorter/rank -unique
  \  file/point file/old file/dirty file/git file file:new\<CR>" :
  \ ":\<C-u>Denite -sorters=sorter/rank -unique
  \  file/point file/old file file:new\<CR>"
  nnoremap <silent> n
  \ :<C-u>Denite -buffer-name=search -resume<CR>

  nnoremap <silent><expr> tt  &filetype == 'help' ?  "g\<C-]>" :
  \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately tag:include\<CR>"
  nnoremap <silent><expr> tp  &filetype == 'help' ?
  \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite jump\<CR>"

  nnoremap <silent> [Window]n :<C-u>Denite dein<CR>
  nnoremap <silent> ;g :<C-u>Denite -buffer-name=search
  \ -no-empty grep<CR>
  nnoremap <silent> ft :<C-u>Denite filetype<CR>
  nnoremap <silent> <C-t> :<C-u>Denite -buffer-name=deol -split=floating
  \ -cursor-pos=`tabpagenr()-1` deol:zsh<CR>
  nnoremap <silent> <C-k> :<C-u>Denite change jump<CR>
  nnoremap <silent> <C-h> :<C-u>DeniteCursorWord help<CR>

  nnoremap <silent> ;;
  \ :<C-u>Denite command command_history<CR>
'''

[plugins.ftplugin]
denite = '''
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> a
  \ denite#do_map('choose_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> e
  \ denite#do_map('do_action', 'edit')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> N
  \ denite#do_map('do_action', 'new')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> '
  \ denite#do_map('quick_move')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> r
  \ denite#do_map('do_action', 'quickfix')
  nnoremap <silent><buffer><expr> <C-r>
  \ denite#do_map('restore_sources')
  nnoremap <silent><buffer><expr> <C-l>
  \ denite#do_map('redraw')
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
name = 'context_filetype'

[[plugins]]
repo = 'tyru/caw.vim'
name = 'caw'
on_map = {nx = '<Plug>'}
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> gc
      silent! xunmap <buffer> gc
      silent! nunmap <buffer> gcc
      silent! xunmap <buffer> gcc
    else
      nmap <buffer> gc <Plug>(caw:prefix)
      xmap <buffer> gc <Plug>(caw:prefix)
      nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
  call InitCaw()
'''

[[plugins]]
repo = 'lambdalisue/vim-findent'
name = 'vim-findent'

[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
name = 'deoplete-jedi'
depends = 'deoplete'
on_ft  =  'python'

[[plugins]]
repo = 'zchee/deoplete-zsh'
name = 'deoplete-zsh'
depends = 'deoplete'
on_ft = ['zsh', 'sh']

[[plugins]]
repo = 'Shougo/deoplete-clangx'
name = 'deoplete-clangx'
depends = 'deoplete'
on_ft  =  ['c', 'cpp']

[[plugins]]
repo = 'ncm2/float-preview.nvim'
name = 'float-preview'
on_source = 'deoplete'
if = 'has("nvim")'
hook_source = '''
  let g:float_preview#docked = 0
  let g:float_preview#max_width = 60
  let g:float_preview#max_height = 20
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
name = 'deoplete'
depends = 'context_filetype'
on_event = 'InsertEnter'
hook_source = '''
	source ~/.config/nvim/settings/plugins/deoplete.rc.vim
	call deoplete#enable()
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
name = 'nvim-treesitter'
if = 'has("nvim")'
on_event = 'BufRead'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    highlight = {
        enable = true,
        disable = {},
    },
    incremental_selection = {
        enable = true,
        disable = {},
        keymaps = {
            init_selection = 'gnn',
            node_incremental = 'grn',
            scope_incremental = 'grc',
            node_decremental = 'grm',
        }
    },
    refactor = {
        highlight_definitions = {
            enable = true
        },
        smart_rename = {
            enable = true,
            smart_rename = 'grr'
        },
        navigation = {
            enable = true,
            goto_definition = 'gnd',
            list_definitions = 'gnD'
        }
    },
    ensure_installed = 'all'
}EOF
'''

[[plugins]]
repo = 'mmarchini/bpftrace.vim'
name = 'bpftrace'
on_ft = ['bpftrace']
